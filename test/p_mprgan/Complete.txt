-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2023-11-09 22:19:56 EST
--   site:      Oracle Database 21c
--   type:      Oracle Database 21c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE corp (
    c_id      INTEGER NOT NULL,
    corp_name VARCHAR(30) NOT NULL,
    reg_num   VARCHAR(20) NOT NULL
);

COMMENT ON COLUMN corp.c_id IS
    'CustomerID';

COMMENT ON COLUMN corp.corp_name IS
    'Corporate Name';

COMMENT ON COLUMN corp.reg_num IS
    'Corporate Registration Number';

ALTER TABLE corp ADD CONSTRAINT corp_pk PRIMARY KEY ( c_id );

CREATE TABLE corp_dis (
    d_id VARCHAR(10) NOT NULL,
    c_id INTEGER NOT NULL
);

COMMENT ON COLUMN corp_dis.d_id IS
    'Discount Coupon Code';

CREATE UNIQUE INDEX corp_dis__idx ON
    corp_dis (
        c_id
    ASC );

ALTER TABLE corp_dis ADD CONSTRAINT corp_dis_pk PRIMARY KEY ( d_id );

CREATE TABLE corpemp (
    e_id INTEGER NOT NULL,
    c_id INTEGER NOT NULL
);

COMMENT ON COLUMN corpemp.e_id IS
    'Employee ID';

ALTER TABLE corpemp ADD CONSTRAINT corpemp_pk PRIMARY KEY ( e_id,
                                                            c_id );

CREATE TABLE crd_deb_card (
    p_id      INTEGER NOT NULL,
    card_num  VARCHAR(16) NOT NULL,
    card_name VARCHAR(30) NOT NULL,
    expmonth  CHAR(2) NOT NULL,
    expyear   CHAR(4) NOT NULL,
    cvv       CHAR(5) NOT NULL
);

COMMENT ON COLUMN crd_deb_card.card_num IS
    'Crad Number';

COMMENT ON COLUMN crd_deb_card.card_name IS
    'Name on Card';

COMMENT ON COLUMN crd_deb_card.expmonth IS
    'Card Expire Month';

COMMENT ON COLUMN crd_deb_card.expyear IS
    'Card Expire Year';

COMMENT ON COLUMN crd_deb_card.cvv IS
    'CVV on Card';

ALTER TABLE crd_deb_card ADD CONSTRAINT crd_deb_card_pk PRIMARY KEY ( p_id );

CREATE TABLE cust (
    c_id      INTEGER NOT NULL,
    c_type    CHAR(1) NOT NULL,
    c_straddr VARCHAR(30) NOT NULL,
    c_city    VARCHAR(20) NOT NULL,
    c_state   VARCHAR(20) NOT NULL,
    c_zip     VARCHAR(5) NOT NULL,
    c_phone   VARCHAR(15) NOT NULL,
    c_email   VARCHAR(30) NOT NULL
);

ALTER TABLE cust
    ADD CONSTRAINT ch_inh_cust CHECK ( c_type IN ( 'C', 'I' ) );

COMMENT ON COLUMN cust.c_id IS
    'CustomerID';

COMMENT ON COLUMN cust.c_type IS
    'Customer Type';

COMMENT ON COLUMN cust.c_straddr IS
    'Customer Street Address';

COMMENT ON COLUMN cust.c_city IS
    'Customer City Address';

COMMENT ON COLUMN cust.c_state IS
    'Customer State Address';

COMMENT ON COLUMN cust.c_zip IS
    'Customer ZIPCODE';

COMMENT ON COLUMN cust.c_phone IS
    'Customer Phone Number';

COMMENT ON COLUMN cust.c_email IS
    'Customer Email Address';

ALTER TABLE cust ADD CONSTRAINT cust_pk PRIMARY KEY ( c_id );

CREATE TABLE discount (
    d_id      VARCHAR(10) NOT NULL,
    disc_perc DOUBLE NOT NULL,
    d_type    CHAR(1) NOT NULL
);

ALTER TABLE discount
    ADD CONSTRAINT ch_inh_discount CHECK ( d_type IN ( 'C', 'I' ) );

COMMENT ON COLUMN discount.d_id IS
    'Discount Coupon Code';

COMMENT ON COLUMN discount.disc_perc IS
    'percentage of discount offered';

COMMENT ON COLUMN discount.d_type IS
    'Discount Coupon Type(I: Indiviual, C: Corporate)';

ALTER TABLE discount ADD CONSTRAINT discount_pk PRIMARY KEY ( d_id );

CREATE TABLE gift_card (
    p_id         INTEGER NOT NULL,
    gift_code    VARCHAR(6) NOT NULL,
    total_amount DOUBLE NOT NULL,
    left_amount  DOUBLE NOT NULL
);

COMMENT ON COLUMN gift_card.gift_code IS
    'Giftcard Card Number';

COMMENT ON COLUMN gift_card.total_amount IS
    'Giftcard Total Amount';

COMMENT ON COLUMN gift_card.left_amount IS
    'Giftcard Amount left';

ALTER TABLE gift_card ADD CONSTRAINT gift_card_pk PRIMARY KEY ( p_id );

CREATE TABLE ind (
    c_id         INTEGER NOT NULL,
    ind_fname    VARCHAR(30) NOT NULL,
    ind_lname    VARCHAR(30) NOT NULL,
    driv_licnum  VARCHAR(20) NOT NULL,
    ins_com_name VARCHAR(30) NOT NULL,
    ins_poli_num VARCHAR(20) NOT NULL
);

COMMENT ON COLUMN ind.c_id IS
    'CustomerID';

COMMENT ON COLUMN ind.ind_fname IS
    'Individual First Name';

COMMENT ON COLUMN ind.ind_lname IS
    'Individual Last Name';

COMMENT ON COLUMN ind.driv_licnum IS
    'Driver License Number';

COMMENT ON COLUMN ind.ins_com_name IS
    'Insurance Company Name';

COMMENT ON COLUMN ind.ins_poli_num IS
    'Insurance Policy Number';

ALTER TABLE ind ADD CONSTRAINT ind_pk PRIMARY KEY ( c_id );

CREATE TABLE ind_disc (
    d_id       VARCHAR(10) NOT NULL,
    start_date DATE NOT NULL,
    end_date   DATE NOT NULL
);

COMMENT ON COLUMN ind_disc.d_id IS
    'Discount Coupon Code';

ALTER TABLE ind_disc ADD CONSTRAINT ind_disc_pk PRIMARY KEY ( d_id );

CREATE TABLE invoice (
    invo_id     INTEGER NOT NULL,
    invo_date   DATE NOT NULL,
    invo_amount DOUBLE NOT NULL,
    serv_id     INTEGER NOT NULL
);

CREATE UNIQUE INDEX invoice__idx ON
    invoice (
        serv_id
    ASC );

ALTER TABLE invoice ADD CONSTRAINT invoice_pk PRIMARY KEY ( invo_id );

CREATE TABLE office_loc (
    o_id      INTEGER NOT NULL,
    o_straddr VARCHAR(30) NOT NULL,
    o_city    VARCHAR(20) NOT NULL,
    o_state   VARCHAR(20) NOT NULL,
    o_zip     VARCHAR(5) NOT NULL,
    o_phone   VARCHAR(10) NOT NULL
);

COMMENT ON COLUMN office_loc.o_id IS
    'Office Location ID';

COMMENT ON COLUMN office_loc.o_straddr IS
    'Office Street Address';

COMMENT ON COLUMN office_loc.o_city IS
    'Office City';

COMMENT ON COLUMN office_loc.o_state IS
    'Office State';

COMMENT ON COLUMN office_loc.o_zip IS
    'Office ZIPCODE';

COMMENT ON COLUMN office_loc.o_phone IS
    'Office Phone Number';

ALTER TABLE office_loc ADD CONSTRAINT office_loc_pk PRIMARY KEY ( o_id );

CREATE TABLE pay_rec (
    pay_rec_id INTEGER NOT NULL,
    pay_amount DOUBLE NOT NULL,
    invo_id    INTEGER NOT NULL,
    p_id       INTEGER NOT NULL
);

ALTER TABLE pay_rec ADD CONSTRAINT pay_rec_pk PRIMARY KEY ( pay_rec_id );

CREATE TABLE payment (
    p_id   INTEGER NOT NULL,
    p_type CHAR(1) NOT NULL,
    c_id   INTEGER NOT NULL
);

ALTER TABLE payment
    ADD CONSTRAINT ch_inh_payment CHECK ( p_type IN ( 'C', 'G' ) );

ALTER TABLE payment ADD CONSTRAINT payment_pk PRIMARY KEY ( p_id );

CREATE TABLE rent_serv (
    serv_id      INTEGER NOT NULL,
    pickup_date  DATE NOT NULL,
    dropoff_date DATE NOT NULL,
    start_ometer DOUBLE NOT NULL,
    end_ometer   DOUBLE,
    is_unltd     DOUBLE NOT NULL,
    c_id         INTEGER NOT NULL,
    d_id         VARCHAR(10),
    vin          VARCHAR(17) NOT NULL,
    pickup_loc   INTEGER NOT NULL,
    dropoff_loc  INTEGER NOT NULL
);

COMMENT ON COLUMN rent_serv.pickup_date IS
    'Pickup Date(Datetime)';

COMMENT ON COLUMN rent_serv.dropoff_date IS
    'Dropoff Date(Datetime)';

COMMENT ON COLUMN rent_serv.start_ometer IS
    'Start Odometer';

COMMENT ON COLUMN rent_serv.end_ometer IS
    'End Odometer';

COMMENT ON COLUMN rent_serv.is_unltd IS
    'Is it unlimited mileage options';

ALTER TABLE rent_serv ADD CONSTRAINT rent_serv_pk PRIMARY KEY ( serv_id );

CREATE TABLE vehicle (
    vin      VARCHAR(17) NOT NULL,
    t_id     INTEGER NOT NULL,
    v_make   VARCHAR(30) NOT NULL,
    v_model  VARCHAR(20) NOT NULL,
    v_year   CHAR(4) NOT NULL,
    v_licnum VARCHAR(10) NOT NULL,
    o_id     INTEGER NOT NULL
);

COMMENT ON COLUMN vehicle.vin IS
    'Vehicle Identification Number';

COMMENT ON COLUMN vehicle.v_licnum IS
    'License Plate Number';

ALTER TABLE vehicle ADD CONSTRAINT vehicle_pk PRIMARY KEY ( vin );

CREATE TABLE vtype (
    t_id       INTEGER NOT NULL,
    daily_rate DOUBLE NOT NULL,
    over_fee   DOUBLE NOT NULL,
    ltd_miles  DOUBLE NOT NULL
);

COMMENT ON COLUMN vtype.t_id IS
    'TypeID';

ALTER TABLE vtype ADD CONSTRAINT vtype_pk PRIMARY KEY ( t_id );

ALTER TABLE corp
    ADD CONSTRAINT corp_cust_fk FOREIGN KEY ( c_id )
        REFERENCES cust ( c_id );

ALTER TABLE corp_dis
    ADD CONSTRAINT corp_dis_corp_fk FOREIGN KEY ( c_id )
        REFERENCES corp ( c_id );

ALTER TABLE corp_dis
    ADD CONSTRAINT corp_dis_discount_fk FOREIGN KEY ( d_id )
        REFERENCES discount ( d_id );

ALTER TABLE corpemp
    ADD CONSTRAINT corpemp_corp_fk FOREIGN KEY ( c_id )
        REFERENCES corp ( c_id );

ALTER TABLE crd_deb_card
    ADD CONSTRAINT crd_deb_card_payment_fk FOREIGN KEY ( p_id )
        REFERENCES payment ( p_id );

ALTER TABLE gift_card
    ADD CONSTRAINT gift_card_payment_fk FOREIGN KEY ( p_id )
        REFERENCES payment ( p_id );

ALTER TABLE ind
    ADD CONSTRAINT ind_cust_fk FOREIGN KEY ( c_id )
        REFERENCES cust ( c_id );

ALTER TABLE ind_disc
    ADD CONSTRAINT ind_disc_discount_fk FOREIGN KEY ( d_id )
        REFERENCES discount ( d_id );

ALTER TABLE invoice
    ADD CONSTRAINT invoice_rent_serv_fk FOREIGN KEY ( serv_id )
        REFERENCES rent_serv ( serv_id );

ALTER TABLE pay_rec
    ADD CONSTRAINT pay_rec_invoice_fk FOREIGN KEY ( invo_id )
        REFERENCES invoice ( invo_id );

ALTER TABLE pay_rec
    ADD CONSTRAINT pay_rec_payment_fk FOREIGN KEY ( p_id )
        REFERENCES payment ( p_id );

ALTER TABLE payment
    ADD CONSTRAINT payment_cust_fk FOREIGN KEY ( c_id )
        REFERENCES cust ( c_id );

ALTER TABLE rent_serv
    ADD CONSTRAINT rent_serv_cust_fk FOREIGN KEY ( c_id )
        REFERENCES cust ( c_id );

ALTER TABLE rent_serv
    ADD CONSTRAINT rent_serv_discount_fk FOREIGN KEY ( d_id )
        REFERENCES discount ( d_id );

ALTER TABLE rent_serv
    ADD CONSTRAINT rent_serv_office_loc_fk FOREIGN KEY ( pickup_loc )
        REFERENCES office_loc ( o_id );

ALTER TABLE rent_serv
    ADD CONSTRAINT rent_serv_office_loc_fkv2 FOREIGN KEY ( dropoff_loc )
        REFERENCES office_loc ( o_id );

ALTER TABLE rent_serv
    ADD CONSTRAINT rent_serv_vehicle_fk FOREIGN KEY ( vin )
        REFERENCES vehicle ( vin );

ALTER TABLE vehicle
    ADD CONSTRAINT vehicle_office_loc_fk FOREIGN KEY ( o_id )
        REFERENCES office_loc ( o_id );

ALTER TABLE vehicle
    ADD CONSTRAINT vehicle_vtype_fk FOREIGN KEY ( t_id )
        REFERENCES vtype ( t_id );

CREATE OR REPLACE TRIGGER arc_fkarc_10_corp BEFORE
    INSERT OR UPDATE OF c_id ON corp
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.c_type
    INTO d
    FROM
        cust a
    WHERE
        a.c_id = :new.c_id;

    IF ( d IS NULL OR d <> 'C' ) THEN
        raise_application_error(-20223, 'FK CORP_CUST_FK in Table CORP violates Arc constraint on Table CUST - discriminator column C_TYPE doesn''t have value ''C'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_10_ind BEFORE
    INSERT OR UPDATE OF c_id ON ind
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.c_type
    INTO d
    FROM
        cust a
    WHERE
        a.c_id = :new.c_id;

    IF ( d IS NULL OR d <> 'I' ) THEN
        raise_application_error(-20223, 'FK IND_CUST_FK in Table IND violates Arc constraint on Table CUST - discriminator column C_TYPE doesn''t have value ''I'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_11_ind_disc BEFORE
    INSERT OR UPDATE OF d_id ON ind_disc
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.d_type
    INTO d
    FROM
        discount a
    WHERE
        a.d_id = :new.d_id;

    IF ( d IS NULL OR d <> 'I' ) THEN
        raise_application_error(-20223, 'FK IND_DISC_DISCOUNT_FK in Table IND_DISC violates Arc constraint on Table DISCOUNT - discriminator column D_TYPE doesn''t have value ''I'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_11_corp_dis BEFORE
    INSERT OR UPDATE OF d_id ON corp_dis
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.d_type
    INTO d
    FROM
        discount a
    WHERE
        a.d_id = :new.d_id;

    IF ( d IS NULL OR d <> 'C' ) THEN
        raise_application_error(-20223, 'FK CORP_DIS_DISCOUNT_FK in Table CORP_DIS violates Arc constraint on Table DISCOUNT - discriminator column D_TYPE doesn''t have value ''C'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_12_gift_card BEFORE
    INSERT OR UPDATE OF p_id ON gift_card
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.p_type
    INTO d
    FROM
        payment a
    WHERE
        a.p_id = :new.p_id;

    IF ( d IS NULL OR d <> 'G' ) THEN
        raise_application_error(-20223, 'FK GIFT_CARD_PAYMENT_FK in Table GIFT_CARD violates Arc constraint on Table PAYMENT - discriminator column P_TYPE doesn''t have value ''G'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_12_crd_deb_card BEFORE
    INSERT OR UPDATE OF p_id ON crd_deb_card
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.p_type
    INTO d
    FROM
        payment a
    WHERE
        a.p_id = :new.p_id;

    IF ( d IS NULL OR d <> 'C' ) THEN
        raise_application_error(-20223, 'FK CRD_DEB_CARD_PAYMENT_FK in Table CRD_DEB_CARD violates Arc constraint on Table PAYMENT - discriminator column P_TYPE doesn''t have value ''C'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            16
-- CREATE INDEX                             2
-- ALTER TABLE                             38
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           6
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
